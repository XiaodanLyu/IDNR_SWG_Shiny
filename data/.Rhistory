Inpath <- "G:/Iowa_DNR/Model files"
Infolder <- paste(Inpath, name, sep = "/")
modelfile <- paste(Infolder, paste(name.abb, "bestmodel_PG.csv", sep = ""), sep = "/")
model <- read.csv(modelfile, skip = 2, header = T, row.names = 1)
require(readxl)
covafile <- paste(Inpath, "Covariates_Iowa.xlsx", sep = "/")
cova1K <- read_excel(covafile, sheet = 1)
cova500 <- read_excel(covafile, sheet = 2)
View(cova500)
View(cova1K)
cova1K <- read_excel(covafile, sheet = 1)
coord <- read_excel(covafile, sheet = 3)
Psi.index <- grep("Psi:", rownames(coef(model)))
Psi.est <- coef(model)$estimate[Psi.index]
Psi.cova <- sub("Psi:", "", rownames(coef(model))[Psi.index])
Psi.index <- grep("Psi:", rownames(model))
Psi.est <- model$estimate[Psi.index]
Psi.cova <- sub("Psi:", "", rownames(model)[Psi.index])
match("500", Psi.cova)
grep("500", Psi.cova)
grep("1k", Psi.cova)
is.na(grep("500", Psi.cova))
is.na(grep("1k", Psi.cova))
grep("500", Psi.cova)==0
is.null(grep("500", Psi.cova))
grepl("500", Psi.cova)
any(grepl("500", Psi.cova))
sheet <- ifelse(any(grepl("500", Psi.cova)), 2, 1)
cova <- read_excel(covafile, sheet = sheet)
Psi.cal <- Psi.est[1] + Psi.est[2]*cova[,Psi.cova[2]]
filename <- paste(name.abb, "Psi_", Psi.cova[(length(Psi.cova))], "_", auc, ".txt", sep = "")
auc <- 0.4468
filename <- paste(name.abb, "Psi_", Psi.cova[(length(Psi.cova))], "_", auc, ".txt", sep = "")
Psi <- cbind(coord, cova(Psi.cal))
convert <- function(x) exp(x)/(1+exp(x))
Psi <- cbind(coord, convert(Psi.cal))
View(Psi)
Psi <- list(coord, Psi = convert(Psi.cal))
Psi <- convert(Psi.cal)
Psimap <- c(coord, Psi)
Psimap <- rbind(coord, Psi)
View(Psimap)
Psimap <- cbind(coord, Psi)
View(Psimap)
Psifile <- paste(name.abb, "Psi_", Psi.cova[(length(Psi.cova))], "_", auc, ".txt", sep = "")
write.table(Psimap, file = paste(Inpath, Psifile, sep = "/"))
write.table(Psimap, file = paste(Infolder, Psifile, sep = "/"), row.names = F)
write.table(Psimap, file = paste(Infolder, Psifile, sep = "/"), row.names = F, quote = F)
para <- "Gam"
para.index <- grep(para, rownames(model))
para.est <- model$estimate[para.index]
model
para.cova <- sub(paste(para, ":", sep = ""), "", rownames(model)[para.index])
mapcr("Gamma")
para <- "Gamma"
para.cova <- sub(paste(para, ":", sep = ""), "", rownames(model)[para.index])
sheet <- ifelse(any(grepl("500", para.cova)), 2, 1)
cova <- read_excel(covafile, sheet = sheet)
para.cal <- para.est[1] + para.est[2]*cova[,para.cova[2]]
if (length(para.cova) > 2)
para.cal <- para.cal + para.est[3]*cova[,para.cova[3]] + para.est[4]*apply(cova[,para.cova[2:3]], 1, prod)
para <- convert(para.cal)
paramap <- cbind(coord, para)
parafile <- paste(name.abb, para, "_", para.cova[(length(para.cova))], "_", auc, ".txt", sep = "")
value <- convert(para.cal)
paramap <- cbind(coord, value)
View(paramap)
names(paramap) <- c(names(coord), para)
names(coord)
para <- "Gamma"
names(paramap) <- c(names(coord), para)
View(paramap)
parafile <- paste(name.abb, para, "_", para.cova[(length(para.cova))], "_", auc, ".txt", sep = "")
write.table(paramap, file = paste(Infolder, parafile, sep = "/"), row.names = F, quote = F)
mapcr <- function(para){
para.index <- grep(para, rownames(model))
para.est <- model$estimate[para.index]
para.cova <- sub(paste(para, ":", sep = ""), "", rownames(model)[para.index])
sheet <- ifelse(any(grepl("500", para.cova)), 2, 1)
cova <- read_excel(covafile, sheet = sheet)
para.cal <- para.est[1] + para.est[2]*cova[,para.cova[2]]
if (length(para.cova) > 2)
para.cal <- para.cal + para.est[3]*cova[,para.cova[3]] + para.est[4]*apply(cova[,para.cova[2:3]], 1, prod)
value <- convert(para.cal)
paramap <- cbind(coord, value)
names(paramap) <- c(names(coord), para)
parafile <- paste(name.abb, para, "_", para.cova[(length(para.cova))], "_", auc, ".txt", sep = "")
write.table(paramap, file = paste(Infolder, parafile, sep = "/"), row.names = F, quote = F)
}
mapcr("Psi")
para <- "Gamma"
substring(para, 1, 3)
dhyper(x = 3, m = 10*0.1, n = 10-10*0.1, k = 5)
dhyper(x = 3, m = 10*0.1, n = 10-10*0.1, k = 5)
phyper(x = 2, m = 10*0.1, n = 10-10*0.1, k = 5, lower.tail = F)
phyper(q = 2, m = 10*0.1, n = 10-10*0.1, k = 5, lower.tail = F)
phyper(q = 3, m = 10*0.1, n = 10-10*0.1, k = 5)
theta <- seq(0, 1, length.out = 21)[-1]
theta
m <- 10*theta
theta <- seq(0, 1, length.out = 11)[-1]
m <- 10*theta
n <- 10 - 10*theta
k <- 5
theta <- seq(0, 1, by = 0.1)
m <- 10*theta
n <- 10 - 10*theta
m
Rt <- function(x){
c(phyper(x, m[1], n[1], k, lower.tail = F) + 10*theta[1]*pnorm(x, m[1], n[1], k),
10*theta[-1]*pnorm(x, m[-1], n[-1], k))
}
Rt3 <- Rt(3)
Rt2 <- Rt(2)
plot(Rt3~theta, type = "b", yylab = expression(R(\theta, \delta_3)))
plot(Rt3~theta, type = "b", yylab = expression(R"("\theta, \delta_3")"))
plot(Rt3~theta, type = "b", yylab = expression(R{\theta, \delta_3}))
plot(Rt3~theta, type = "b", yylab = expression(\theta, \delta_3))
plot(Rt3~theta, type = "b", yylab = expression(R(theta, delta_3)))
plot(Rt3~theta, type = "b", ylab = expression(R(theta, delta_3)))
warnings()
plot(Rt3~theta, type = "b", ylab = expression(R(theta, delta[3])))
plot(Rt3~theta, type = "b", ylab = expression(R(theta, delta[k])))
lines(Rt2~theta, type = "b", lty = 2)
Rt3 <- Rt(2)
Rt2 <- Rt(1)
plot(Rt3~theta, type = "b", ylab = expression(R(theta, delta[k])))
lines(Rt2~theta, type = "b", lty = 2)
legend("topright", legend = c("k = 3", "k = 2"), lty = 1:2)
Rt3 <- Rt(2)
Rt2 <- Rt(1)
plot(Rt3~theta, type = "b", ylab = expression(R(theta, delta[k])))
lines(Rt2~theta, type = "b", lty = 2)
legend("topright", legend = c("k = 3", "k = 2"), lty = 1:2, bty = "n")
t <- seq(-1, 1, by = 0.05)
which(t == 0)
t[t<0]
t[t>0]
Rtt <- function(s, r = -1){
c(pnorm(r - t[t<0], lower.tail = F) + pnorm(s - t[t<0], lower.tail = F),
pnorm(s, lower.tail = F) + pnorm(r, llower.tail = F),
pnorm(s - t[t>0]) + pnorm(r - t[t>0]))
}
Rtt1 <- Rtt(1)
Rtt2 <- Rtt(2)
Rtt <- function(s, r = -1){
c(pnorm(r - t[t<0], lower.tail = F) + pnorm(s - t[t<0], lower.tail = F),
pnorm(s, lower.tail = F) + pnorm(r),
pnorm(s - t[t>0]) + pnorm(r - t[t>0]))
}
Rtt1 <- Rtt(1)
Rtt2 <- Rtt(2)
plot(Rtt1~t, type = "l", xlab = expression(theta), ylab = expression(R(theta, delta[r,s])))
plot(Rtt1[t!=0]~t[t!=0], type = "l", xlab = expression(theta), ylab = expression(R(theta, delta)))
point(t[t==0], Rtt1[t==0])
points(t[t==0], Rtt1[t==0])
t[t==0]
Rtt1[t==0]
points(t[t==0], Rtt1[t==0], type = "o")
points(t[t==0], Rtt1[t==0], type = "p")
plot(Rtt1[t!=0]~t[t!=0], type = "l", xlab = expression(theta), ylab = expression(R(theta, delta)), ylim = c(0, 1))
points(t[t==0], Rtt1[t==0], type = "p")
lines(Rtt2[t!=0]~t[t!=0], type = "l", lty = 2)
plot(Rtt1[t!=0]~t[t!=0], type = "l", xlab = expression(theta), ylab = expression(R(theta, delta)), ylim = range(Rtt1, Rtt2))
points(t[t==0], Rtt1[t==0], type = "p")
lines(Rtt2[t!=0]~t[t!=0], type = "l", lty = 2)
points(t[t==0], Rtt2[t==0], type = "p", lty = 2)
t <- seq(-10, 10, by = 0.5)
Rtt <- function(s, r = -1){
c(pnorm(r - t[t<0], lower.tail = F) + pnorm(s - t[t<0], lower.tail = F),
pnorm(s, lower.tail = F) + pnorm(r),
pnorm(s - t[t>0]) + pnorm(r - t[t>0]))
}
Rtt1 <- Rtt(1)
Rtt2 <- Rtt(2)
plot(Rtt1[t!=0]~t[t!=0], type = "l", xlab = expression(theta), ylab = expression(R(theta, delta)), ylim = range(Rtt1, Rtt2))
points(t[t==0], Rtt1[t==0], type = "p")
lines(Rtt2[t!=0]~t[t!=0], type = "l", lty = 2)
points(t[t==0], Rtt2[t==0], type = "p")
plot(Rtt1[t<0]~t[t<0], type = "l", xlab = expression(theta), ylab = expression(R(theta, delta)), ylim = range(Rtt1, Rtt2))
plot(Rtt1[t<0]~t[t<0], type = "l", xlim = range(t), ylim = range(Rtt1, Rtt2),
xlab = expression(theta), ylab = expression(R(theta, delta)))
lines(Rtt2[t>0]~t[t>0], type = "l", lty = 1)
lines(Rtt2[t<0]~t[t<0], type = "l", lty = 2)
lines(Rtt2[t>0]~t[t>0], type = "l", lty = 2)
plot(Rtt1[t<0]~t[t<0], type = "l", xlim = range(t), ylim = range(Rtt1, Rtt2),
xlab = expression(theta), ylab = expression(R(theta, delta)))
lines(Rtt1[t>0]~t[t>0], type = "l", lty = 1)
lines(Rtt2[t<0]~t[t<0], type = "l", lty = 2)
lines(Rtt2[t>0]~t[t>0], type = "l", lty = 2)
t <- seq(-10, 10, by = 0.05)
Rtt1 <- Rtt(1)
Rtt2 <- Rtt(2)
plot(Rtt1[t<0]~t[t<0], type = "l", xlim = range(t), ylim = range(Rtt1, Rtt2),
xlab = expression(theta), ylab = expression(R(theta, delta)))
lines(Rtt1[t>0]~t[t>0], type = "l", lty = 1)
lines(Rtt2[t<0]~t[t<0], type = "l", lty = 2)
lines(Rtt2[t>0]~t[t>0], type = "l", lty = 2)
points(t[t==0], Rtt1[t==0], type = "p")
points(t[t==0], Rtt2[t==0], type = "p")
points(t[t==0], Rtt2[t==0], type = "p", pch = 19)
t <- seq(-5, 5, by = 0.05)
Rtt <- function(s, r = -1){
c(pnorm(r - t[t<0], lower.tail = F) + pnorm(s - t[t<0], lower.tail = F),
pnorm(s, lower.tail = F) + pnorm(r),
pnorm(s - t[t>0]) + pnorm(r - t[t>0]))
}
Rtt1 <- Rtt(1)
Rtt2 <- Rtt(2)
plot(Rtt1[t<0]~t[t<0], type = "l", xlim = range(t), ylim = range(Rtt1, Rtt2),
xlab = expression(theta), ylab = expression(R(theta, delta)))
lines(Rtt1[t>0]~t[t>0], type = "l", lty = 1)
lines(Rtt2[t<0]~t[t<0], type = "l", lty = 2)
lines(Rtt2[t>0]~t[t>0], type = "l", lty = 2)
points(t[t==0], Rtt1[t==0], type = "p", pch = 19)
points(t[t==0], Rtt2[t==0], type = "p")
legend("topright", legend = c("r = -1, s = 1", "r = -1, s = 2"), lty = 1:2, bty = "n")
install.packages("shinny")
install.packages("shiny")
shiny::runApp('C:/Users/lyux/Dropbox/workshop/shiny-presentation-master/hello_world')
setwd("G:/Iowa_DNR/Maps/Birds/Acadian Flycatcher - ACFL")
data <- read.table("ACFLGam_Wod500LPI.txt", header = T)
d <- read.table("ACFLGam_Wod500LPI.txt", header = T)
range(d$UTM_x)
image(UTM_x, UTM_y, Gam, data = d)
image(d$UTM_x, d$UTM_y, d$Gam)
View(data)
range(unique(x))
range(unique(d$UTM_x))
plot(~d$UTM_x)
plot(d$UTM_x~)
plot(d$UTM_x~.)
plot(d$UTM_x)
plot(d$UTM_y)
shiny::runApp('G:/Iowa_DNR/Maps')
shiny::runApp('G:/Iowa_DNR/Maps')
shiny::runApp('G:/Iowa_DNR/Maps')
shiny::runApp('G:/Iowa_DNR/Maps')
file.path('./images',
paste('image', input$n, '.jpeg', sep=''))
file.path('./images',
paste('image', "1", '.jpeg', sep=''))
shiny::runApp('G:/Iowa_DNR/Maps/IDNR-app')
normalizePath(file.path('./images',
paste("ACFL", "PsiMap", '.tiff', sep='')))
shiny::runApp('G:/Iowa_DNR/Maps/IDNR-app')
setwd("G:/Iowa_DNR/Maps/IDNR-app")
shiny::runApp()
filename <- normalizePath(file.path('./images',
paste(input$specie, "PsiMap", '.tiff', sep='')))
normalizePath(file.path('./images',
paste("ACFL", "PsiMap", '.tiff', sep='')))
shiny::runApp()
shiny::runApp()
normalizePath(file.path('./images',
paste(input$specie, "PsiMap", '.tif', sep='')))
normalizePath(file.path('./images',
paste("ACFL", "PsiMap", '.tif', sep='')))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runGitHub("shiny-examples/047-image-output/server.R")
runGitHub("rstudio/shiny-examples/047-image-output/server.R")
runGitHub("rstudio/shiny-examples/047-image-output")
runGitHub("shiny_example", "rstudio", subdir = "047-image-output")
if (interactive()){}
if (interactive()){}
if (interactive()){
runGitHub("shiny_example", "rstudio", subdir = "047-image-output")
}
runGitHub("shiny_example", "rstudio", subdir = "tree/master/047-image-output")
if (interactive()){
runGitHub("shiny_example", "rstudio", subdir = "tree/master/047-image-output")
}
shiny::runApp('examples')
install.packages("png")
shiny::runApp('examples')
shiny::runApp('examples')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("EBImage")
install.packages()
install.packages("png")
library("png")
img <- readPNG("./images/face.png")
img <- readPNG("./images/face")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
split("Acadian Flycatcher - ACFL", "-")
strsplit("Acadian Flycatcher - ACFL", "-")
strsplit("Acadian Flycatcher - ACFL", "-")[[2]]
strsplit("Acadian Flycatcher - ACFL", "-")[2]
strsplit("Acadian Flycatcher - ACFL", "-")[3]
unlist(strsplit("Acadian Flycatcher - ACFL", "-"))[2]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
unlist("Acadian Flycatcher - ACFL", " - ")
shiny::runApp()
install.packages("readxl")
library(readxl)
model <- read_excel("./data/Birds_Models.xlsx", sheet = "Model-Birds_New")
View(model)
model <- read_excel("./data/Birds_Models.xlsx", sheet = "Model-Birds_New")
View(model)
specie <- "Acadian Flycatcher"
View(model)
which(specie, model$Specie)
which(specie == model$Specie)
model[15,]
shiny::runApp()
model <- read_excel("./data/Birds_Models.xlsx", sheet = "Model-Birds_New_Script")
View(model)
View(model)
names(model)
grep(model, "CI")
grep(model, "*CI")
grep("CI", names(model))
names(model)[grep("CI", names(model))]
View(model)
model <- read_excel("./data/Birds_Models.xlsx", sheet = "Model-Birds_New_Script")
names(model)[grep("CI", names(model))]
shiny::runApp()
View(model)
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(model)
shiny::runApp()
para <- read_excel("./data/Birds_Models.xlsx", sheet = "Real Parameter_New_Script")
View(para)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(para)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?img
example(img)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
substring("Gamma", stop = 3)
substring("Gamma", 1, 3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ind
ind <- 155
ind <- 15
model[ind, "Eps.CI"]
shiny::runApp()
is.na(model[ind, "Eps.CI"])
!is.na(model[ind, "Eps.CI"])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("G:/Iowa_DNR/IDNR-app-shiny/data")
d <- read.table("ACFLPsi.txt")
View(d)
d <- read.table("ACFLPsi.txt", header = T)
range(d[,2])
options(digits = 4)
range(d[,2])
options(digits = 10)
range(d[,2])
x <- seq(min(d[,2]), max(d[,2]), by = 1000)
x[1:3]
y <- seq(min(d[,3]), max(d[,3]), by = 1000)
range(d[,3])
d[1,2] %in% x
sum(d[,2] %in% x)
length(d[,2] %in% x)
d[,2][!(d[, 2] %in% x)][1]
View(d)
x[60]
d[,1][!(d[, 2] %in% x)][1]
d[89,2]
d[89,2] %in% x
d[89,2] == x[60]
x[60]
d[89,2] - x[60]
d[,2] = round(d[, 2], 4)
sum(d[,2] %in% x)
d[89,2] == x[60]
x <- round(x, 4)
sum(d[,2] %in% x)
d[89, 2] == x[60]
d <- read.table("ACFLPsi.txt", header = T)
sum(d[,2] %in% x)
y <- round(y, 3)
sum(d[,3] %in% y)
x <- seq(min(d[,2]), max(d[,2]), by = 10e3)
y <- seq(min(d[,3]), max(d[,3]), by = 10e3)
sum(d[, 2] %in% x)
x <- round(x, 4)
sum(d[, 2] %in% x)
10e3
1e3
e3
x <- seq(min(d[,2]), max(d[,2]), by = 1e3)
sum(d[, 2] %in% x)
x <- round(x, 4)
sum(d[, 2] %in% x)
y <- seq(min(d[,3]), max(d[,3]), by = 1e3)
y <- round(y, 3)
sum(d[, 3] %in% y)
max(y)
length(which(x in d[,2]))
length(which(x %in% d[,2]))
which(x %in% d[,2])[1]
x[1] %in% d[,2]
which(x[1] %in% d[,2])
which(x[1:2] %in% d[,2])
length(which(d[,2] %in% x))
which(d[,2] %in% x)
which(d[,2] %in% x)[1]
which(d[,2] %in% x)[2]
which(d[,2], x)[1]
match(d[,2], x)[1]
x[7]
match(x, d[,2])[1]
match(d[,3], y)[1]
z[match(d[,2], x), match(d[,3], y)] = d[, 4]
z <- matrix(nrow = nr, ncol = nc)
nr <- length(y)
nc <- length(x)
z <- matrix(nrow = nr, ncol = nc)
z[match(d[,2], x), match(d[,3], y)] = d[, 4]
z[match(d[,3], y), match(d[,2], x)] = d[, 4]
sum(is.na(z))
View(z)
View(z)
d <- read.table("ACFLPsi.txt", header = T)
x <- seq(min(d[,2]), max(d[,2]), by = 1e3)
x <- round(x, 4)
y <- seq(min(d[,3]), max(d[,3]), by = 1e3)
y <- round(y, 3)
sum(d[, 2] %in% x)
sum(d[, 3] %in% y)
nr <- length(y)
nc <- length(x)
z <- matrix(nrow = nr, ncol = nc)
range(d[,1])
for (i in d[,1])
z[match(d[i,3], y), match(d[i,2], x)] = d[i, 4]
View(z)
sum(is.na(z))
image(x, y, z)
image(y, x, z)
image(x, y, t(z), axes = F)
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = terrain.colors(10))
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = terrain.colors(100))
demo(image)
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = heat.colors(100))
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = heat.colors(100))
x <- seq(min(d[,2]), max(d[,2]), by = 1e3)
x <- round(x, 4)
y <- seq(min(d[,3]), max(d[,3]), by = 1e3)
y <- round(y, 3)
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = heat.colors(100))
heat.colors(10)
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = rev(heat.colors(100)))
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = rev(rgb(100)))
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = rev(terrain.colors(100)))
image(x, y, t(z), axes = F, xlab = NA, ylab = NA, col = terrain.colors(100))
source('G:/Iowa_DNR/IDNR-app-shiny/data/rmap.r')
system.time(source('G:/Iowa_DNR/IDNR-app-shiny/data/rmap.r'))
